input {
  beats {
    port => 5044
  }
}

filter {
    # Initial handling of raw message.
      mutate {
        add_field => {
          "[@metadata][resolve_ip2host]" => "${SYNLITE_SNORT_RESOLVE_IP2HOST:false}"
          "[@metadata][geoip_lookup]" => "${SYNLITE_SNORT_GEOIP_LOOKUP:true}"
          "[@metadata][asn_lookup]" => "${SYNLITE_SNORT_ASN_LOOKUP:true}"
          "[@metadata][cleanup_sigs]" => "${SYNLITE_SNORT_CLEANUP_SIGS:false}"
        }
        rename => {
          "[fields][event][type]" => "[event][type]"
          "[fields][event][subtype]" => "[event][subtype]"
          "[host]" => "[event][host]"
          "[message]" => "[event][message]"
        }
        remove_field => [ "prospector", "source" ]
        remove_tag => [ "beats_input_codec_plain_applied" ]
        replace => {
          "@version" => "1.0.0"
        }
      }

      if [@metadata][ip_address] {
        mutate {
          add_field => { "[node][ipaddr]" => "%{[@metadata][ip_address]}" }
        }
      }
      if [beat][hostname] {
        mutate {
          rename => { "[beat][hostname]" => "[node][hostname]" }
        }
      }

      mutate {
        remove_field => [ "beat", "fields", "offset" ]
      }

    # Parse raw log message.
      grok {
        patterns_dir => "${SYNLITE_SNORT_GROK_PATTERNS_DIR:/etc/logstash/synlite_snort/patterns}"
        match => {
          "[event][message]" => [
            # 05/08-19:44:14.928615  [**] [1:2014823:2] ET CURRENT_EVENTS Blackhole Malicious PDF asdvsa [**] [Classification: A Network Trojan was Detected] [Priority: 1] {TCP} 85.17.147.215:80 -> 192.168.15.10:1104
            "^%{NOTSQROPEN:[snort_timestamp]}\s+\[\*+\]\s+\[%{NONNEGINT:[gid]}:%{NONNEGINT:[sid]}:%{NONNEGINT:[rev]}\]\s+%{GREEDYDATA:[signature]}\s+\[\*+\](?:\s+\[Classification:\s+%{NOTSQRCLOSE:[class]}\])?(?:\s+\[Priority:\s+%{NONNEGINT:[priority]}\])?(?:\s+\[Xref\s+=>\s+%{NOTSQRCLOSE:[xref]}\])?\s+{%{NOTCURLYCLOSE:[proto]}}\s+%{IP:[src_ip]}(?::%{INT:[src_port]})?\s+->\s+%{IP:[dest_ip]}(?::%{INT:[dest_port]})?.*$",

            # 11/09/08-18:18:45.400180 {TCP} 192.168.2.103:38464 -> 82.165.50.118:80 [**] [1:2000001:0] LOCAL http_header test for gzip [**] [Classification: Unknown] [Priority: 0]
            "^%{NOTCURLYOPEN:[snort_timestamp]}\s+{%{NOTCURLYCLOSE:[proto]}}\s+%{IP:[src_ip]}(?::%{INT:[src_port]})?\s+->\s+%{IP:[dest_ip]}(?::%{INT:[dest_port]})?\s+\[\*+\]\s+\[%{NONNEGINT:[gid]}:%{NONNEGINT:[sid]}:%{NONNEGINT:[rev]}\]\s+%{GREEDYDATA:[signature]}\s+\[\*+\](?:\s+\[Classification:\s+%{NOTSQRCLOSE:[class]}\])?(?:\s+\[Priority:\s+%{NONNEGINT:[priority]}\])?(?:\s+\[Xref\s+=>\s+%{NOTSQRCLOSE:[xref]}\])?.*$",

            # Sun Nov 9 18:18:45 2008 {} 192.168.2.103:38464 -> 82.165.50.118:80 [**] [1:2000001:0] LOCAL http_header test for gzip [**] [Classification: unknown] [Priority: 0] [Xref => None]
            "^%{NOTCURLYOPEN:[snort_timestamp]}\s+{(?:%{NOTCURLYCLOSE:[proto]})?}\s+%{IP:[src_ip]}(?::%{INT:[src_port]})?\s+->\s+%{IP:[dest_ip]}(?::%{INT:[dest_port]})?\s+\[\*+\]\s+\[%{NONNEGINT:[gid]}:%{NONNEGINT:[sid]}:%{NONNEGINT:[rev]}\]\s+%{GREEDYDATA:[signature]}\s+\[\*+\](?:\s+\[Classification:\s+%{NOTSQRCLOSE:[class]}\])?(?:\s+\[Priority:\s+%{NONNEGINT:[priority]}\])?(?:\s+\[Xref\s+=>\s+%{NOTSQRCLOSE:[xref]}\])?.*$"
          ]
        }
      }
      if "_grokparsefailure" in [tags] {
        mutate {
          add_tag => "__snort_alert_fast_pattern_mismatch"
          remove_tag => [ "_grokparsefailure" ]
        }
      } else {
        # Determine IP Version with CIDR checks.
          if [src_ip] {
            cidr {
              id => "snort_ipv4_cidr_src"
              address => [ "%{[src_ip]}" ]
              network => [ "0.0.0.0/0" ]
              add_field => {
                "[ip_version]" => "IPv4"
              }
            }
            if ![ip_version] {
              cidr {
                id => "snort_ipv6_cidr_src"
                address => [ "%{[src_ip]}" ]
                network => [ "::/0" ]
                add_field => {
                  "[ip_version]" => "IPv6"
                }
              }
            }
          } else if [dest_ip] {
            cidr {
              id => "snort_ipv4_cidr_dest"
              address => [ "%{[dest_ip]}" ]
              network => [ "0.0.0.0/0" ]
              add_field => {
                "[ip_version]" => "IPv4"
              }
            }
            if ![ip_version] {
              cidr {
                id => "snort_ipv6_cidr_dest"
                address => [ "%{[dest_ip]}" ]
                network => [ "::/0" ]
                add_field => {
                  "[ip_version]" => "IPv6"
                }
              }
            }
          }

        # If enabled, resolve names of source and destination IP addresses.
          if [dest_ip] {
            # If localhost then use the IP from the host field.
            if [dest_ip] == "127.0.0.1" {
              mutate {
                id => "snort_dest_hostname_localhost"
                replace => { "[dest_hostname]" => "%{[event][host]}" }
              }
            } else {
              mutate {
                id => "snort_dest_hostname_ip"
                add_field => { "[dest_hostname]" => "%{[dest_ip]}"}
              }
            }
            # Resolve destination IP address to hostname.
            if [@metadata][resolve_ip2host] == "true" {
              dns {
                id => "snort_dns_dest_hostname"
                reverse => [ "[dest_hostname]" ]
                action => "replace"
                nameserver => "${SYNLITE_SNORT_NAMESERVER:127.0.0.1}"
                hit_cache_size => "${SYNLITE_SNORT_DNS_HIT_CACHE_SIZE:25000}"
                hit_cache_ttl => "${SYNLITE_SNORT_DNS_HIT_CACHE_TTL:900}"
                failed_cache_size => "${SYNLITE_SNORT_DNS_FAILED_CACHE_SIZE:75000}"
                failed_cache_ttl => "${SYNLITE_SNORT_DNS_FAILED_CACHE_TTL:3600}"
              }
            }
          }

          if [src_ip] {
            # If localhost then use the IP from the host field.
            if [src_ip] == "127.0.0.1" {
              mutate {
                id => "snort_src_hostname_localhost"
                replace => { "[src_hostname]" => "%{[event][host]}" }
              }
            } else {
              mutate {
                id => "snort_src_hostname_ip"
                add_field => { "[src_hostname]" => "%{[src_ip]}"}
              }
            }
            # Resolve source IP address to hostname.
            if [@metadata][resolve_ip2host] == "true" {
              dns {
                id => "snort_dns_src_hostname"
                reverse => [ "[src_hostname]" ]
                action => "replace"
                nameserver => "${SYNLITE_SNORT_NAMESERVER:127.0.0.1}"
                hit_cache_size => "${SYNLITE_SNORT_DNS_HIT_CACHE_SIZE:25000}"
                hit_cache_ttl => "${SYNLITE_SNORT_DNS_HIT_CACHE_TTL:900}"
                failed_cache_size => "${SYNLITE_SNORT_DNS_FAILED_CACHE_SIZE:75000}"
                failed_cache_ttl => "${SYNLITE_SNORT_DNS_FAILED_CACHE_TTL:3600}"
              }
            }
          }

        # Determine the locality of the traffic and lookup GeoIP, ASN and IP Reputation information.
          if [dest_ip] or [src_ip] {
            # Initialize traffic_locality to private. This maybe changed to public based on analysis of the source and destination IP addresses below.
            mutate {
              id => "snort_traffic_locality_default"
              add_field => { "[traffic_locality]" => "private" }
            }

            if [dest_ip] {
              # Check if destination IP address is private.
                cidr {
                  id => "snort_cidr_dest_ip"
                  address => [ "%{[dest_ip]}" ]
                  network => [ "0.0.0.0/32", "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7", "127.0.0.0/8", "::1/128","169.254.0.0/16", "fe80::/10","224.0.0.0/4", "ff00::/8","255.255.255.255/32" ]
                  add_field => { "[dest_autonomous_system]" => "private" }
                }

              # Check to see if dest_autonomous_system exists. If it doesn't the dest_ip didn't match a private address space and must be public.
                if ![dest_autonomous_system] {
                  mutate {
                    id => "snort_dest_ip_public"
                    replace => { "[traffic_locality]" => "public" }
                  }

                  # If enabled lookup destination GeoIP location.
                    if [@metadata][geoip_lookup] == "true" {
                      geoip {
                        id => "snort_geoip_dest_city"
                        source => "[dest_ip]"
                        database => "${SYNLITE_SNORT_GEOIP_DB_PATH:/etc/logstash/synlite_snort/geoipdbs}/GeoLite2-City.mmdb"
                        cache_size => "${SYNLITE_SNORT_GEOIP_CACHE_SIZE:8192}"
                        target => "[metadata][geoip_dest]"
                        fields => [ "city_name", "country_name", "location" ]
                      }
                      if "_geoip_lookup_failure" not in [tags] {
                        mutate {
                          rename => {
                            "[metadata][geoip_dest][city_name]" => "[dest_city]"
                            "[metadata][geoip_dest][country_name]" => "[dest_country]"
                            "[metadata][geoip_dest][location]" => "[dest_geo_location]"
                          }
                        }
                        if [dest_city] {
                          mutate {
                            add_field => { "[city]" => "%{[dest_city]}" }
                          }
                        }
                        if [dest_country] {
                          mutate {
                            add_field => { "[country]" => "%{[dest_country]}" }
                          }
                        }
                      } else {
                        mutate {
                          remove_tag => [ "_geoip_lookup_failure" ]
                        }
                      }
                    }

                  # If enabled lookup destination Autonomous System.
                    if [@metadata][asn_lookup] == "true" {
                      # Lookup destination Autonomous System.
                      geoip {
                        id => "snort_geoip_dest_asn"
                        source => "[dest_ip]"
                        database => "${SYNLITE_SNORT_GEOIP_DB_PATH:/etc/logstash/synlite_snort/geoipdbs}/GeoLite2-ASN.mmdb"
                        cache_size => "${SYNLITE_SNORT_GEOIP_CACHE_SIZE:8192}"
                        target => "[metadata][geoip_dest]"
                      }
                      # Populate dest_autonomous_system.
                      if "_geoip_lookup_failure" not in [tags] {
                        if [metadata][geoip_dest][as_org] {
                          if [metadata][geoip_dest][asn] {
                            mutate {
                              id => "snort_dest_as_from_as_org_asn"
                              add_field => { "[dest_autonomous_system]" => "%{[metadata][geoip_dest][as_org]} (%{[metadata][geoip_dest][asn]})" }
                            }
                          } else {
                            mutate {
                              id => "snort_dest_as_from_as_org"
                              add_field => { "[dest_autonomous_system]" => "%{[metadata][geoip_dest][as_org]}" }
                            }
                          }
                        } else if [metadata][geoip_dest][asn] {
                          mutate {
                            id => "snort_dest_as_from_asn"
                            add_field => { "[dest_autonomous_system]" => "%{[metadata][geoip_dest][asn]}" }
                          }
                        } else {
                          mutate {
                            add_field => { "[dest_autonomous_system]" => "public" }
                          }
                        }
                        mutate {
                          id => "snort_set_dest_asn"
                          rename => { "[metadata][geoip_dest][asn]" => "[dest_asn]" }
                        }
                      } else {
                        mutate {
                          add_field => { "[dest_autonomous_system]" => "public" }
                          remove_tag => [ "_geoip_lookup_failure" ]
                        }
                      }
                    } else {
                      mutate {
                        id => "snort_no_dest_asn_lookup"
                        add_field => { "[dest_autonomous_system]" => "public" }
                      }
                    }
                    mutate {
                      add_field => {
                        "[autonomous_system]" => "%{[dest_autonomous_system]}"
                      }
                    }

                  # Lookup destination IP reputation.
                    translate {
                      id => "snort_public_dest_rep_label"
                      dictionary_path => "${SYNLITE_SNORT_DICT_PATH:/etc/logstash/synlite_snort/dictionaries}/ip_rep_basic.yml"
                      field => "[dest_ip]"
                      destination => "[@metadata][dest_rep_label]"
                    }
                    # Parse the IP reputation lable into tags.
                    if [@metadata][dest_rep_label] {
                      ruby {
                        id => "snort_public_dest_rep_tags"
                        init => "
                          require 'csv'
                        "
                        code => "
                          event.set('[dest_rep_tags]', event.get('[@metadata][dest_rep_label]').parse_csv)
                        "
                      }
                    }
                }
            }

            if [src_ip] {
              # Check if source IP address is private.
                cidr {
                  id => "snort_cidr_src_ip"
                  address => [ "%{[src_ip]}" ]
                  network => [ "0.0.0.0/32", "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7", "127.0.0.0/8", "::1/128", "169.254.0.0/16", "fe80::/10", "224.0.0.0/4", "ff00::/8", "255.255.255.255/32", "::" ]
                  add_field => { "[src_autonomous_system]" => "private" }
                }

              # Check to see if src_autonomous_system exists. If it doesn't the src_ip didn't match a private address space and locality must be public.
                if ![src_autonomous_system] {
                  mutate {
                    id => "snort_src_ip_public"
                    replace => { "[traffic_locality]" => "public" }
                  }

                  # If enabled lookup source GeoIP location.
                    if [@metadata][geoip_lookup] == "true" {
                      geoip {
                        id => "snort_geoip_src_city"
                        source => "[src_ip]"
                        database => "${SYNLITE_SNORT_GEOIP_DB_PATH:/etc/logstash/synlite_snort/geoipdbs}/GeoLite2-City.mmdb"
                        cache_size => "${SYNLITE_SNORT_GEOIP_CACHE_SIZE:8192}"
                        target => "[metadata][geoip_src]"
                        fields => [ "city_name", "country_name", "location", "country_code2" ]
                      }
                      if "_geoip_lookup_failure" not in [tags] {
                        mutate {
                          rename => {
                            "[metadata][geoip_src][city_name]" => "[src_city]"
                            "[metadata][geoip_src][country_name]" => "[src_country]"
                            "[metadata][geoip_src][location]" => "[src_geo_location]"
                            "[metadata][geoip_src][country_code2]" => "[src_country_code]"
                          }
                        }
                        if [src_city] {
                          mutate {
                            add_field => { "[city]" => "%{[src_city]}" }
                          }
                        }
                        if [src_country] {
                          mutate {
                            add_field => { "[country]" => "%{[src_country]}" }
                          }
                        }
                        if [src_country_code] {
                          mutate {
                            add_field => { "[country_code]" => "%{[src_country_code]}" }
                          }
                        }
                      }
                    }

                  # If enabled lookup the source Autonomous System.
                    if [@metadata][asn_lookup] == "true" {
                      geoip {
                        id => "snort_geoip_src_asn"
                        source => "[src_ip]"
                        database => "${SYNLITE_SNORT_GEOIP_DB_PATH:/etc/logstash/synlite_snort/geoipdbs}/GeoLite2-ASN.mmdb"
                        cache_size => "${SYNLITE_SNORT_GEOIP_CACHE_SIZE:8192}"
                        target => "[metadata][geoip_src]"
                      }
                      # Populate src_autonomous_system.
                      if "_geoip_lookup_failure" not in [tags] {
                        if [metadata][geoip_src][as_org] {
                          if [metadata][geoip_src][asn] {
                            mutate {
                              id => "snort_src_as_from_as_org_asn"
                              add_field => { "[src_autonomous_system]" => "%{[metadata][geoip_src][as_org]} (%{[metadata][geoip_src][asn]})" }
                            }
                          } else {
                            mutate {
                              id => "snort_src_as_from_as_org"
                              add_field => { "[src_autonomous_system]" => "%{[metadata][geoip_src][as_org]}" }
                            }
                          }
                        } else if [metadata][geoip_src][asn] {
                          mutate {
                            id => "snort_src_as_from_asn"
                            add_field => { "[src_autonomous_system]" => "%{[metadata][geoip_src][asn]}" }
                          }
                        } else {
                          mutate {
                            add_field => { "[src_autonomous_system]" => "public" }
                          }
                        }
                        mutate {
                          id => "snort_set_src_asn"
                          rename => { "[metadata][geoip_src][asn]" => "[src_asn]" }
                        }
                      } else {
                        mutate {
                          add_field => { "[src_autonomous_system]" => "public" }
                          remove_tag => [ "_geoip_lookup_failure" ]
                        }
                      }
                    } else {
                      mutate {
                        id => "snort_no_src_asn_lookup"
                        add_field => { "[src_autonomous_system]" => "public" }
                      }
                    }
                    mutate {
                      add_field => {
                        "[autonomous_system]" => "%{[src_autonomous_system]}"
                      }
                    }

                  # Lookup source IP reputation.
                    translate {
                      id => "snort_public_src_rep_label"
                      dictionary_path => "${SYNLITE_SNORT_DICT_PATH:/etc/logstash/synlite_snort/dictionaries}/ip_rep_basic.yml"
                      field => "[src_ip]"
                      destination => "[@metadata][src_rep_label]"
                    }
                    # Parse the IP reputation lable into tags.
                    if [@metadata][src_rep_label] {
                      ruby {
                        id => "snort_public_src_rep_tags"
                        init => "
                          require 'csv'
                        "
                        code => "
                          event.set('[src_rep_tags]', event.get('[@metadata][src_rep_label]').parse_csv)
                        "
                      }
                    }
                }
            }

            # Cleanup any GeoIP lookup failure tag.
              if "_geoip_lookup_failure" in [tags] {
                mutate {
                  id => "snort_cleanup_geoip_fail_tag"
                  remove_tag => [ "_geoip_lookup_failure" ]
                }
              }

            # Merge reputation tags.
              ruby {
                id => "snort_merge_rep_tags"
                init => "
                  require 'csv'
                "
                code => "
                  src_tags = event.get('[@metadata][src_rep_label]')
                  dest_tags = event.get('[@metadata][dest_rep_label]')

                  if (src_tags)
                    rep_tags = src_tags
                    if (dest_tags)
                      rep_tags = rep_tags << ',' << dest_tags
                    end
                  else (dest_tags)
                    rep_tags = dest_tags
                  end

                  if (rep_tags)
                    event.set('[rep_tags]', rep_tags.parse_csv )
                  end
                "
              }
          }

        # IP traffic processing.
          if [proto] {
            # lookup IANA service name for source and destination ports.
              if [proto] == "TCP" {
                if [src_port] {
                  translate {
                    id => "snort_translate_src_port_name_tcp"
                    dictionary_path => "${SYNLITE_SNORT_DICT_PATH:/etc/logstash/synlite_snort/dictionaries}/iana_service_names_tcp.yml"
                    field => "[src_port]"
                    destination => "[src_port_name]"
                    fallback => "__UNKNOWN"
                  }
                }
                if [dest_port] {
                  translate {
                    id => "snort_translate_dest_port_name_tcp"
                    dictionary_path => "${SYNLITE_SNORT_DICT_PATH:/etc/logstash/synlite_snort/dictionaries}/iana_service_names_tcp.yml"
                    field => "[dest_port]"
                    destination => "[dest_port_name]"
                    fallback => "__UNKNOWN"
                  }
                }
              } else if [proto] == "UDP" {
                if [src_port] {
                  translate {
                    id => "snort_translate_src_port_name_udp"
                    dictionary_path => "${SYNLITE_SNORT_DICT_PATH:/etc/logstash/synlite_snort/dictionaries}/iana_service_names_udp.yml"
                    field => "[src_port]"
                    destination => "[src_port_name]"
                    fallback => "__UNKNOWN"
                  }
                }
                if [dest_port] {
                  translate {
                    id => "snort_translate_dest_port_name_udp"
                    dictionary_path => "${SYNLITE_SNORT_DICT_PATH:/etc/logstash/synlite_snort/dictionaries}/iana_service_names_udp.yml"
                    field => "[dest_port]"
                    destination => "[dest_port_name]"
                    fallback => "__UNKNOWN"
                  }
                }
              } else if [proto] == "SCTP" {
                if [src_port] {
                  translate {
                    id => "snort_translate_src_port_name_sctp"
                    dictionary_path => "${SYNLITE_SNORT_DICT_PATH:/etc/logstash/synlite_snort/dictionaries}/iana_service_names_sctp.yml"
                    field => "[src_port]"
                    destination => "[src_port_name]"
                    fallback => "__UNKNOWN"
                  }
                }
                if [dest_port] {
                  translate {
                    id => "snort_translate_dest_port_name_sctp"
                    dictionary_path => "${SYNLITE_SNORT_DICT_PATH:/etc/logstash/synlite_snort/dictionaries}/iana_service_names_sctp.yml"
                    field => "[dest_port]"
                    destination => "[dest_port_name]"
                    fallback => "__UNKNOWN"
                  }
                }
              } else if [proto] == "DCCP" {
                if [src_port] {
                  translate {
                    id => "snort_translate_src_port_name_dccp"
                    dictionary_path => "${SYNLITE_SNORT_DICT_PATH:/etc/logstash/synlite_snort/dictionaries}/iana_service_names_dccp.yml"
                    field => "[src_port]"
                    destination => "[src_port_name]"
                    fallback => "__UNKNOWN"
                  }
                }
                if [dest_port] {
                  translate {
                    id => "snort_translate_dest_port_name_dccp"
                    dictionary_path => "${SYNLITE_SNORT_DICT_PATH:/etc/logstash/synlite_snort/dictionaries}/iana_service_names_dccp.yml"
                    field => "[dest_port]"
                    destination => "[dest_port_name]"
                    fallback => "__UNKNOWN"
                  }
                }
              } else {
                mutate {
                  add_field => {
                    "[src_port_name]" => "__UNKNOWN"
                    "[dest_port_name]" => "__UNKNOWN"
                  }
                }
              }

            # Ensure port numbers are integers.
              mutate {
                id => "snort_convert_ports_to_int"
                convert => {
                  "[src_port]" => "integer"
                  "[dest_port]" => "integer"
                }
              }

            # Determine client and server from source and destination ports.
              if [dest_port] and [src_port] {
                if [src_port_name] == "__UNKNOWN" {
                  if [dest_port_name] == "__UNKNOWN" {
                    if [dest_port] <= [src_port] {
                      mutate {
                        id => "snort_srcUn_destUn_destIsSrv"
                        add_field => { "[@metadata][isServer]" => "dest" }
                      }
                    } else {
                      mutate {
                        id => "snort_srcUn_destUn_srcIsSrv"
                        add_field => { "[@metadata][isServer]" => "src" }
                      }
                    }
                  } else {
                    mutate {
                      id => "snort_srcUn_destKn_destIsSrv"
                      add_field => { "[@metadata][isServer]" => "dest" }
                    }
                  }
                } else {
                  if [dest_port_name] == "__UNKNOWN" {
                    mutate {
                      id => "snort_srcKn_destUn_srcIsSrv"
                      add_field => { "[@metadata][isServer]" => "src" }
                    }
                  } else {
                    if [dest_port] <= [src_port] {
                      mutate {
                        id => "snort_srcKn_destKn_destIsSrv"
                        add_field => { "[@metadata][isServer]" => "dest" }
                      }
                    } else {
                      mutate {
                        id => "snort_srcKn_destKn_srcIsSrv"
                        add_field => { "[@metadata][isServer]" => "src" }
                      }
                    }
                  }
                }
              }

            # Set final value of port name fields.
              if [src_port_name] {
                if [src_port_name] == "__UNKNOWN" {
                  if [src_port] {
                    mutate {
                      id => "snort_src_port_name_unknown"
                      replace => { "[src_port_name]" => "%{[proto]}/%{[src_port]}" }
                    }
                  } else {
                    mutate {
                      id => "snort_src_port_name_unknown_port_0"
                      replace => { "[src_port_name]" => "%{[proto]}/0" }
                    }
                  }
                } else {
                  mutate {
                    id => "snort_src_port_name_prepend_src_port"
                    replace => { "[src_port_name]" => "%{[src_port_name]} (%{[proto]}/%{[src_port]})" }
                  }
                }
              }
              if [dest_port_name] {
                if [dest_port_name] == "__UNKNOWN" {
                  if [dest_port] {
                    mutate {
                      id => "snort_dest_port_name_unknown"
                      replace => { "[dest_port_name]" => "%{[proto]}/%{[dest_port]}" }
                    }
                  } else {
                    mutate {
                      id => "snort_dest_port_name_unknown_port_0"
                      replace => { "[dest_port_name]" => "%{[proto]}/0" }
                    }
                  }
                } else {
                  mutate {
                    id => "snort_dest_port_name_prepend_dest_port"
                    replace => { "[dest_port_name]" => "%{[dest_port_name]} (%{[proto]}/%{[dest_port]})" }
                  }
                }
              }

            # Set client, server and service fields.
              if [@metadata][isServer] == "dest" {
                mutate {
                  id => "snort_destIsSrv_add_fields"
                  add_field => {
                    "[server_ip]" => "%{[dest_ip]}"
                    "[server_hostname]" => "%{[dest_hostname]}"
                    "[server_autonomous_system]" => "%{[dest_autonomous_system]}"
                    "[service_port]" => "%{[dest_port]}"
                    "[service_name]" => "%{[dest_port_name]}"
                    "[client_ip]" => "%{[src_ip]}"
                    "[client_hostname]" => "%{[src_hostname]}"
                    "[client_autonomous_system]" => "%{[src_autonomous_system]}"
                  }
                }
                if [dest_autonomous_system] != "private" {
                  if [dest_city] {
                    mutate {
                      id => "snort_destIsSrv_add_dest_city"
                      add_field => { "[server_city]" => "%{[dest_city]}" }
                    }
                  }
                  if [dest_country] {
                    mutate {
                      id => "snort_destIsSrv_add_dest_country"
                      add_field => { "[server_country]" => "%{[dest_country]}" }
                    }
                  }
                  if [dest_geo_location] {
                    mutate {
                      id => "snort_destIsSrv_add_dest_geo_location"
                      add_field => { "[server_geo_location]" => "%{[dest_geo_location][lat]},%{[dest_geo_location][lon]}" }
                    }
                  }
                  if [dest_asn] {
                    mutate {
                      id => "snort_destIsSrv_add_dest_asn"
                      add_field => { "[server_asn]" => "%{[dest_asn]}" }
                    }
                  }
                }
                if [src_autonomous_system] != "private" {
                  if [src_city] {
                    mutate {
                      id => "snort_destIsSrv_add_src_src_city"
                      add_field => { "[client_city]]" => "%{[src_city]}" }
                    }
                  }
                  if [src_country] {
                    mutate {
                      id => "snort_destIsSrv_add_src_country"
                      add_field => { "[client_country]" => "%{[src_country]}" }
                    }
                  }
                  if [src_geo_location] {
                    mutate {
                      id => "snort_destIsSrv_add_src_geo_location"
                      add_field => { "[client_geo_location]" => "%{[src_geo_location][lat]},%{[src_geo_location][lon]}" }
                    }
                  }
                  if [src_asn] {
                    mutate {
                      id => "snort_destIsSrv_add_src_asn"
                      add_field => { "[client_asn]" => "%{[src_asn]}" }
                    }
                  }
                }
              } else if [@metadata][isServer] == "src" {
                mutate {
                  id => "snort_srcIsSrv_add_fields"
                  add_field => {
                    "[server_ip]" => "%{[src_ip]}"
                    "[server_hostname]" => "%{[src_hostname]}"
                    "[server_autonomous_system]" => "%{[src_autonomous_system]}"
                    "[service_port]" => "%{[src_port]}"
                    "[service_name]" => "%{[src_port_name]}"
                    "[client_ip]" => "%{[dest_ip]}"
                    "[client_hostname]" => "%{[dest_hostname]}"
                    "[client_autonomous_system]" => "%{[dest_autonomous_system]}"
                  }
                }
                if [dest_autonomous_system] != "private" {
                  if [dest_city] {
                    mutate {
                      id => "snort_srcIsSrv_add_dest_city"
                      add_field => { "[client_city]]" => "%{[dest_city]}" }
                    }
                  }
                  if [dest_country] {
                    mutate {
                      id => "snort_srcIsSrv_add_dest_country"
                      add_field => { "[client_country]" => "%{[dest_country]}" }
                    }
                  }
                  if [dest_geo_location] {
                    mutate {
                      id => "snort_srcIsSrv_add_dest_geo_location"
                      add_field => { "[client_geo_location]" => "%{[dest_geo_location][lat]},%{[dest_geo_location][lon]}" }
                    }
                  }
                  if [dest_asn] {
                    mutate {
                      id => "snort_srcIsSrv_add_dest_asn"
                      add_field => { "[client_asn]" => "%{[dest_asn]}" }
                    }
                  }
                }
                if [src_autonomous_system] != "private" {
                  if [src_city] {
                    mutate {
                      id => "snort_srcIsSrv_add_src_autonomous_system"
                      add_field => { "[server_city]]" => "%{[src_city]}" }
                    }
                  }
                  if [src_country] {
                    mutate {
                      id => "snort_srcIsSrv_add_src_country"
                      add_field => { "[server_country]" => "%{[src_country]}" }
                    }
                  }
                  if [src_geo_location] {
                    mutate {
                      id => "snort_srcIsSrv_add_src_geo_location"
                      add_field => { "[server_geo_location]" => "%{[src_geo_location][lat]},%{[src_geo_location][lon]}" }
                    }
                  }
                  if [src_asn] {
                    mutate {
                      id => "snort_srcIsSrv_add_src_asn"
                      add_field => { "[server_asn]" => "%{[src_asn]}" }
                    }
                  }
                }
              }
          }

        # Set log.severity
          if [priority] {
            translate {
              field => "[priority]"
              destination => "[log][severity]"
              dictionary => {
                "1" => "alert"
                "2" => "critical"
                "3" => "warning"
                "4" => "notice"
              }
              fallback => "warning"
            }
          } else {
            mutate {
              replace => { "[log][severity]" => "informational" }
            }
          }

        # Populate alert.cve.
          if [sid] {
            translate {
              id => "snort_cve"
              dictionary_path => "${SYNLITE_SNORT_DICT_PATH:/etc/logstash/synlite_snort/dictionaries}/snort_cve.yml"
              field => "[sid]"
              destination => "[cve]"
            }
          }

        # Cleanup attack decriptions.
          if [@metadata][cleanup_sigs] == "true" {
            if [signature] {
              if [signature] =~ /^ET DELETED .*$/ {
                mutate {
                  gsub => [ "[signature]", "^ET DELETED ", "" ]
                }
              } else if [signature] =~ /^ET .*$/ {
                mutate {
                  gsub => [ "[signature]", "^ET ", "" ]
                }
              } else if [signature] =~ /^SURICATA .*$/ {
                mutate {
                  gsub => [ "[signature]", "^SURICATA ", "" ]
                }
              } else if [signature] =~ /^DELETED .*$/ {
                mutate {
                  gsub => [ "[signature]", "^DELETED ", "" ]
                }
              } else if [signature] =~ /^CURRENT_EVENTS(?: -)? .*$/ {
                mutate {
                  gsub => [ "[signature]", "^CURRENT_EVENTS(?: -)? ", "" ]
                }
              }
            }
          }

        # Set @timestamp from snort_timestamp.
          if [snort_timestamp] {
            mutate {
              gsub => [ "[snort_timestamp]", "\s+$", "" ]
            }
            date {
              locale => "en"
              match => [ "[snort_timestamp]", "MM/dd-HH:mm:ss.SSSSSS", "MM/dd/yy-HH:mm:ss.SSSSSS", "EEE MMM d HH:mm:ss yyyy", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss", "MMM dd yyyy HH:mm:ss", "MMM  d yyyy HH:mm:ss", "ISO8601", "yyyy-MM-dd HH:mm:ss.SSSSSS", "MMM dd HH:mm:ss yyyy", "MMM  d HH:mm:ss yyyy" ]
            }
          }

        # Cleanup metadata object.
          mutate {
            id => "snort_remove_metadata"
            remove_field => [ "[metadata]" ]
          }
    }
}

output {
  elasticsearch {
    hosts => ["localhost:9200"]
    index => "snort-"
  }
}